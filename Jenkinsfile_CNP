#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def product = "aac"
def component = "manage-case-assignment"

GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
  'ccd-${env}': [
    secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
    secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
    secret('ccd-importer-autotest-email', 'CCD_IMPORT_AUTOTEST_EMAIL'),
    secret('ccd-importer-autotest-password', 'CCD_IMPORT_AUTOTEST_PASSWORD'),
    secret('ccd-api-gateway-oauth2-client-secret', 'OAUTH2_CLIENT_SECRET')
  ],
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
    secretType : 'Secret',
    name       : secretName,
    version    : '',
    envVariable: envVar
  ]
}

def vaultOverrides = [
  'preview' : 'aat'
]

// vars needed for functional tests
env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.BEFTA_S2S_CLIENT_ID = "xui_webapp"
env.OAUTH2_CLIENT_ID = "ccd_gateway"
env.OAUTH2_REDIRECT_URI = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.DEFINITION_STORE_HOST = "http://ccd-definition-store-api-aat.service.core-compute-aat.internal"

// temporary workaround for platform changes: turn BEFTA header checks to warning mode
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN"

withPipeline("java", product, component) {
  after('test') {
    builder.gradle('integration')

    // hmcts/cnp-jenkins-library may fail to copy artifacts after checkstyle error so repeat command (see /src/uk/gov/hmcts/contino/GradleBuilder.groovy)
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/*.html'

    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/pmd/*.html'
  }
  onMaster {
    enableSlackNotifications('#ccd-master-builds')
  }
  onDemo {
    enableSlackNotifications('#ccd-demo-builds')
  }
  onPR {
    enableSlackNotifications('#ccd-pr-builds')
  }

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)

  enableAksStagingDeployment()
  disableLegacyDeployment()

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/befta/**/*', excludes: '**/reports/tests/befta/**/*.json'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/tests/befta/**/*', excludes: '**/reports/tests/befta/**/*.json'
  }
}
