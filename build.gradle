plugins {
  id 'application'
  id 'jacoco'
  id 'au.com.dius.pact' version '4.1.7'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.25'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.owasp.dependencycheck' version '11.1.1'
  id 'org.sonarqube' version '6.0.1.5171'
  id 'org.springframework.boot' version '3.4.1'
  id 'uk.gov.hmcts.java' version '0.12.63'
}

ext {
  set('springCloudVersion', '2024.0.0')
  set('spring-framework.version', '6.2.1')
  set('spring-security.version', '6.4.2')
  set('log4j2.version', '2.24.3')
  set('jackson.version', '2.18.2')
  set('snakeyaml.version', '2.3')
  
  junit               = '5.11.4'
  junitPlatform       = '1.11.4'
  lombokVersion       = '1.18.36'
  pact_version        = '4.1.43'
  reformLogging       = '6.1.4'
  restAssured         = '5.5.1'
}

group = 'uk.gov.hmcts.reform'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  mainClass.set('uk.gov.hmcts.reform.managecase.Application')
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }

}

tasks.withType(JavaCompile) {
   options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

tasks.withType(Copy).configureEach {
  duplicatesStrategy 'exclude'
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
    systemProperties = System.properties
  }
}

test {
  failFast = true
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs smoke tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

  generateCucumberReports.enabled = false

  new File("$buildDir/test-results/test").mkdirs()
  copy {
    from "src/functionalTest/resources/DummyTest.xml"
    into "$buildDir/test-results/test"
  }

  doLast {
    generateCucumberReports.enabled = true
    cucumberReports.outputDir = file("${project.buildDir}/reports/tests/befta/smoke")
    cucumberReports.reports = files("${cucumberReports.outputDir}/cucumber.json")
    cucumberReports.notFailingStatuses = ["skipped", "passed"]

    javaexec {
      main = "uk.gov.hmcts.reform.managecase.befta.ManageCaseAssignmentBeftaMain"
      classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = [
              '--plugin', "json:${cucumberReports.outputDir}/cucumber.json",
              '--plugin', "junit:${buildDir}/test-results/smoke/cucumber.xml",
              '--tags', '@Smoke and not @Ignore',
              '--glue', 'uk.gov.hmcts.befta.player',
              '--glue', 'uk.gov.hmcts.reform.managecase.befta', 'src/functionalTest/resources/features'
      ]
      // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  outputs.upToDateWhen { false }
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

  generateCucumberReports.enabled = false

  doLast {
    generateCucumberReports.enabled = true
    cucumberReports.outputDir = file("${project.buildDir}/reports/tests/befta/functional")
    cucumberReports.reports = files("${cucumberReports.outputDir}/cucumber.json")
    cucumberReports.notFailingStatuses = ["skipped", "passed"]

    javaexec {
      main = "uk.gov.hmcts.reform.managecase.befta.ManageCaseAssignmentBeftaMain"
      classpath += sourceSets.functionalTest.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = [
              '--threads', '1',
              '--plugin', "json:${cucumberReports.outputDir}/cucumber.json",
              '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
              '--tags', 'not @Ignore',
              '--glue', 'uk.gov.hmcts.befta.player',
              '--glue', 'uk.gov.hmcts.reform.managecase.befta', 'src/functionalTest/resources/features'
      ]
      // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  outputs.upToDateWhen { false }
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

tasks.register('contract', Test) {
  description = 'Runs the consumer Pact tests'
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  include "uk/gov/hmcts/reform/managecase/api/controller/provider/**"
}

tasks.register('runProviderPactVerification', Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  if (project.hasProperty('pact.verifier.publishResults')) {
    systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
  }
  systemProperty 'pact.provider.version', project.pactVersion
}

tasks.named('runProviderPactVerification').configure {
  finalizedBy 'pactVerify'
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_URL") ?: 'http://localhost:80'
    tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
    version = project.pactVersion
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform::manage-case-assignment"
    property "sonar.projectKey", "uk.gov.hmcts.reform:manage-case-assignment"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

apply from: './gradle/suppress.gradle'
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    name = "AzureArtifacts"
    url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
  }
}

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${junit}",
    "org.junit.jupiter:junit-jupiter-engine:${junit}",
    "org.junit.jupiter:junit-jupiter-params:${junit}",
    "org.junit.platform:junit-platform-commons:${junitPlatform}",
    "org.junit.platform:junit-platform-engine:${junitPlatform}",
    "org.apiguardian:apiguardian-api:1.1.2"
  ]
]

dependencies {

  // start::CVE Vulnerability dependency overrides                                                    // MAIN PARENT DEPENDEDNCY

  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.6'                   // spring-boot-starter
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.6'                      // spring-boot-starter
  implementation group: 'com.auth0', name: 'java-jwt', version: '4.5.0'                               // service-auth-provider-java-client
  implementation group: 'com.google.code.gson', name: 'gson', version: '2.12.1'                       // java-properties-to-json
  implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'                      // java-properties-to-json
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '10.0.2'                    // spring-boot-starter-oauth2-client
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'              // spring-cloud-starter-openfeign
  implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'                           // spring-cloud-starter-openfeign
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.5'              // idam-java-client
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.5'                 // idam-java-client
  implementation group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'              // feign-form-spring
  implementation group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.8.0'       // spring-cloud-starter-openfeign
  implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.2'            // jaxb-runtime
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'                          // hibernate-types-60
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'                // java-properties-to-json
  implementation group: 'org.glassfish.jaxb', name: 'jaxb-core', version: '4.0.5'                     // jaxb-runtime
  implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.16'                             // spring-boot-starter
  implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '2.0.16'                          // spring-boot-starter

  // end::CVE Vulnerability dependency overrides                                                      // MAIN PARENT DEPENDEDNCY

  // Spring Deps
  implementation group: 'org.springframework.boot', name: 'spring-boot-properties-migrator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-gateway-mvc'
  implementation group: 'org.springframework.retry', name: 'spring-retry'
  implementation group: 'org.springframework.security', name: 'spring-security-web'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.security', name: 'spring-security-rsa', version: '1.1.5'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.5'

  // HMCTS
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.2.0'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: reformLogging



  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.1.8'
  implementation group: 'com.vladmihalcea', name: 'hibernate-types-60', version: '2.21.1'
  implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
  runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.6'
  runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.6'
  implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.7.3'
  implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
  implementation group: 'pl.jalokim.propertiestojson', name: 'java-properties-to-json', version: '5.3.0'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'
  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.4.2'
  implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.5'
  annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.3'
  implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.2.2'
  implementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  implementation group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'
  implementation group: 'org.reactivestreams', name: 'reactive-streams', version: '1.0.4'
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.19.1-RELEASE'


  testImplementation libraries.junit5
  testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: '9.2.1'
  testImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: '7.24.2'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.6', classifier: 'all'
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: restAssured
  testImplementation group: 'io.rest-assured', name: 'json-path', version: restAssured
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: restAssured
  testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.19.1'
  testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.3'
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.5.0'
  testImplementation group: 'org.mockito', name: 'mockito-subclass', version: '5.5.0'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: pact_version
  contractTestRuntimeOnly group: 'au.com.dius.pact.consumer', name: 'junit5', version: pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: pact_version
  contractTestImplementation group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  contractTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

}

bootJar {
  getArchiveFileName().set(provider {
    'manage-case-assignment.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

tasks.register('fortifyScan', JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

tasks.register('reloadEnvSecrets') {
  doFirst {
    def env = project.findProperty('env') ?: 'demo'
    if (project.file("./.${env}-remote-env").exists()) {
      project.file("./.${env}-remote-env").delete()
    }
  }
}

tasks.register('runRemoteDemo', JavaExec) {
  mainClass = application.mainClass
  classpath = sourceSets.main.runtimeClasspath
  doFirst() {
    configRemoteRunTask(it, 'demo')
  }
}

void configRemoteRunTask(Task execTask, String env) {
  loadEnvSecrets(env)
  project.file("./.${env}-remote-env").readLines().each() {
    def index = it.indexOf("=")
    def key = it.substring(0, index)
    def value = it.substring(index + 1)
    execTask.environment(key, value)
  }
}

void loadEnvSecrets(String env) {
  def azCmd = ['az', 'keyvault', 'secret', 'show', '--vault-name', "ccd-${env}", '-o', 'tsv', '--query', 'value', '--name', 'manage-case-assignment-remote-env']
  if (!project.file("./.${env}-remote-env").exists()) {
    new ByteArrayOutputStream().withStream { os ->
      exec {
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
          commandLine ['cmd', '/c'] + azCmd
        } else {
          commandLine azCmd
        }
        standardOutput = os
      }
      project.file("./.${env}-remote-env").write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
    }
  }
}
