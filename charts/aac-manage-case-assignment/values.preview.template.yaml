java:
  devmemoryRequests: 2048Mi
  devcpuRequests: 2000m
  devmemoryLimits: 4096Mi
  devcpuLimits: 4000m
  # Don't modify below here
  image: ${IMAGE_NAME}
  ingressHost: ${SERVICE_FQDN}
  keyVaults:
    aac:
      secrets:
        - name: aac-manage-case-s2s-secret
          alias: MANAGE_CASE_S2S_KEY
        - name: idam-mca-client-secret
          alias: IDAM_CLIENT_SECRET
        - name: idam-mca-system-user-username
          alias: IDAM_CAA_USERNAME
        - name: idam-mca-system-user-password
          alias: IDAM_CAA_PASSWORD
        - name: idam-noc-approver-username
          alias: IDAM_NOC_APPROVER_USERNAME
        - name: idam-noc-approver-password
          alias: IDAM_NOC_APPROVER_PASSWORD
        - name: notify-mca-api-key-secret
          alias: NOTIFY_MCA_API_KEY
  environment:
    S2S_URL: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    CCD_DATA_STORE_API_BASE_URL: http://ccd-data-store-api-pr-1260-java.ccd
    CCD_DEFINITION_STORE_API_BASE_URL: http://ccd-definition-store-api-pr-575-java.ccd
    ROLE_ASSIGNMENT_URL: http://am-role-assignment-service-aat.service.core-compute-aat.internal
    MANAGE_CASE_S2S_AUTHORISED_SERVICES: xui_webapp,ccd_data,finrem_case_orchestration,divorce_frontend,iac,nfdiv_cos,fpl_case_service,civil_service,prl_cos_api

ccd:
  enabled: true
  ccd:
    s2s:
      enabled: false
    dataStore:
      enabled: true
    adminWeb:
      enabled: false
    definitionImporter:
      enabled: false
    userProfileImporter:
      enabled: false
    apiGatewayWeb:
      enabled: false
    ras:
      enabled: true
    elastic:
      enabled: false
    postgresql:
      enabled: false

  ingressHost: ${SERVICE_FQDN}

  global:
    ccdDefinitionStoreUrl: http://${SERVICE_NAME}-ccd-definition-store
    ccdUserProfileUrl: http://${SERVICE_NAME}-ccd-user-profile-api
    dmStoreUrl: http://dm-store-aat.service.core-compute-aat.internal
    idamApiUrl: https://idam-api.aat.platform.hmcts.net
    idamWebUrl: https://idam-web-public.aat.platform.hmcts.net
    s2sUrl: http://rpe-service-auth-provider-aat.service.core-compute-aat.internal
    enableKeyVaults: true
    devMode: true

  ccd-definition-store-api:
    java:
      ingressHost: ccd-definition-store-${SERVICE_FQDN}
      image: hmctspublic.azurecr.io/ccd/definition-store-api:latest
      imagePullPolicy: Always
      devmemoryRequests: 2048Mi
      devcpuRequests: 2000m
      devmemoryLimits: 4096Mi
      devcpuLimits: 4000m
      secrets:
        DEFINITION_STORE_DB_PASSWORD:
          secretRef: "{{ .Values.global.postgresSecret }}"
          key: PASSWORD
          disabled: true
      environment:
        DEFINITION_STORE_DB_HOST: "{{ .Release.Name }}-postgresql"
        ELASTIC_SEARCH_ENABLED: true
        ELASTIC_SEARCH_HOST: "{{ .Release.Name }}-es-master"
        DEFINITION_STORE_DB_USERNAME: "{{ .Values.postgresql.auth.username}}"
        DEFINITION_STORE_DB_PASSWORD: "{{ .Values.postgresql.auth.password}}"
        DEFINITION_STORE_DB_OPTIONS: ""
        ELASTIC_SEARCH_FAIL_ON_IMPORT: true
        DEFINITION_STORE_IDAM_KEY: ${CCD_DEFINITION_S2S_SECRET}


  ccd-data-store-api:
    java:
      ingressHost: ccd-data-store-api-${SERVICE_FQDN}
      imagePullPolicy: Always
      devmemoryRequests: '1524Mi'
      devmemoryLimits: '2048Mi'
      devcpuRequests: '500m'
      secrets:
        DATA_STORE_DB_PASSWORD:
          secretRef: "{{ .Values.global.postgresSecret }}"
          key: PASSWORD
          disabled: true
      environment:
        DATA_STORE_DB_HOST: '{{ .Release.Name }}-postgresql'
        DATA_STORE_DB_USERNAME: "{{ .Values.postgresql.auth.username}}"
        DATA_STORE_DB_PASSWORD: "{{ .Values.postgresql.auth.password}}"
        DATA_STORE_IDAM_KEY: ${CCD_DATA_STORE_S2S_SECRET}
        IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET: ${IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET}
        IDAM_DATA_STORE_SYSTEM_USER_USERNAME: ${IDAM_DATA_STORE_SYSTEM_USER_USERNAME}
        IDAM_DATA_STORE_SYSTEM_USER_PASSWORD: ${IDAM_DATA_STORE_SYSTEM_USER_PASSWORD}
        IDAM_API_BASE_URL: https://idam-api.aat.platform.hmcts.net
        IDAM_OIDC_URL: https://idam-web-public.aat.platform.hmcts.net
        DATA_STORE_CROSS_JURISDICTIONAL_ROLES: caseworker-caa,caseworker-approver
        ELASTIC_SEARCH_ENABLED: true
        ELASTIC_SEARCH_HOSTS: ${SERVICE_NAME}-es-master:9200
        ELASTIC_SEARCH_DATA_NODES_HOSTS: http://${SERVICE_NAME}-es-master:9200
        HTTP_CLIENT_READ_TIMEOUT: '120000'
        HTTP_CLIENT_MAX_TOTAL: '300'
        HTTP_CLIENT_MAX_CLIENT_PER_ROUTE: '30'
        DATA_STORE_DB_MAX_POOL_SIZE: 80
        DATA_STORE_DB_OPTIONS: "?stringtype=unspecified&reWriteBatchedInserts=true&sslmode=require"
        CCD_DOCUMENT_URL_PATTERN: ^https?://(((?:dm-store-aat\.service\.core-compute-aat\.internal(?::\d+)?)\/documents\/[A-Za-z0-9-]+(?:\/binary)?))
        CASE_DOCUMENT_AM_URL: ${CASE_DOCUMENT_AM_URL}
        UPLOAD_TIMESTAMP_FEATURED_CASE_TYPES: CARE_SUPERVISION_EPO
        DATA_STORE_S2S_AUTHORISED_SERVICES: ccd_data,ccd_gw,ccd_ps,sscs,bulk_scan_orchestrator,ccpay_bubble,ctsc_work_allocation,em_ccd_orchestrator,xui_webapp,aac_manage_case_assignment,wa_task_configuration_api,wa_task_monitor,ccd_case_document_am_api,hmc_cft_hearing_service,wa_task_management_api

  ccd-user-profile-api:
    java:
      ingressHost: ccd-user-profile-api-${SERVICE_FQDN}
      image: hmctspublic.azurecr.io/ccd/user-profile-api:latest
      imagePullPolicy: Always
      environment:
        USER_PROFILE_DB_HOST: "{{ .Release.Name }}-postgresql"
        USER_PROFILE_DB_USERNAME: "{{ .Values.postgresql.auth.username}}"
        USER_PROFILE_DB_PASSWORD: "{{ .Values.postgresql.auth.password}}"
        USER_PROFILE_DB_OPTIONS: ""
      secrets:
        USER_PROFILE_DB_PASSWORD:
          secretRef: "{{ .Values.global.postgresSecret }}"
          key: PASSWORD
          disabled: true

  am-role-assignment-service:
    java:
      ingressHost: am-role-assignment-service-${SERVICE_FQDN}
      secrets:
        ROLE_ASSIGNMENT_DB_PASSWORD:
          secretRef: "{{ .Values.global.postgresSecret }}"
          key: PASSWORD
          disabled: true
      environment:
        ROLE_ASSIGNMENT_DB_HOST: "{{ .Release.Name }}-postgresql"
        ROLE_ASSIGNMENT_DB_USERNAME: "{{ .Values.postgresql.auth.username}}"
        ROLE_ASSIGNMENT_DB_PASSWORD: "{{ .Values.postgresql.auth.password}}"
        ROLE_ASSIGNMENT_DB_OPTIONS: "?stringtype=unspecified"
      postgresql:
        enabled: true
        primary:
          persistence:
            enabled: false
          initdb:
            scripts:
              init.sql: |
                CREATE DATABASE "data-store" WITH OWNER = javapostgres ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "definition-store" WITH OWNER = javapostgres ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "user-profile" WITH OWNER = javapostgres ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
                CREATE DATABASE "role-assignment" WITH OWNER = javapostgres ENCODING = 'UTF-8' CONNECTION LIMIT = -1;
        auth:
          username: "javapostgres"
          password: "javapassword"
        postgresHostname: ${SERVICE_NAME}-postgresql

elastic:
  enabled: true

elasticsearch:
  nameOverride: ${SERVICE_NAME}-es
  clusterName: "es"
  replicas: 1
  minimumMasterNodes: 1
  antiAffinity: "soft"
  esJavaOpts: "-Xmx512m -Xms512m"
  # Their tests delete the pod after succeeding, we pass --logs to the test command which fail if the pod has already been deleted
  # The tests do pass, at least as of 2023-01-19
  tests:
    enabled: false
  extraEnvs:
    - name: discovery.type
      value: single-node
    - name: cluster.initial_master_nodes
      value: ""
    - name: action.auto_create_index
      value: .security*,.watches,.triggered_watches,.watcher-history-*,.logstash_dead_letter,.ml*
  persistence:
    enabled: false
  ingress:
    enabled: false
    className: traefik
    # hosts:
    #   - host: es-${SERVICE_FQDN}
    #     paths:
    #       - path: /
logstash:
  image: "hmctspublic.azurecr.io/imported/logstash/logstash"
  imageTag: "7.16.1"
  imagePullPolicy: "IfNotPresent"
  logstashJavaOpts: "-Xmx1g -Xms512M"
  extraInitContainers: |
    - name: download-postgres-jdbc
      image: hmctspublic.azurecr.io/curl:7.70.0
      command: ['curl', '-L', 'https://jdbc.postgresql.org/download/postgresql-42.2.18.jar', '-o', '/logstash-lib/postgresql.jar']
      volumeMounts:
      - name: logstash-lib
        mountPath: /logstash-lib
  extraVolumes: |
    - name: logstash-lib
      emptyDir: {}
  extraVolumeMounts: |
    - name: logstash-lib
      mountPath: /usr/share/logstash/ccd
  logstashConfig:
    logstash.yml: |
      http.host: 0.0.0.0
      xpack.monitoring.enabled: false
      xpack.monitoring.elasticsearch.hosts: ["http://{{ .Release.Name }}-es-master:9200"]
      queue.type: persisted
      dead_letter_queue.enable: true
    pipelines.yml: |
      - pipeline.id: main
        path.config: "/usr/share/logstash/pipeline/{01_input,02_filter,03_output}.conf"
        queue.type: persisted
  logstashPipeline:
    01_input.conf: |
      input  {
        jdbc {
          jdbc_connection_string => "jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/data-store?stringtype=unspecified"
          jdbc_user => "javapostgres"
          jdbc_password => "javapassword"
          jdbc_validate_connection => true
          jdbc_driver_library => "/usr/share/logstash/ccd/postgresql.jar"
          jdbc_driver_class => "org.postgresql.Driver"
          jdbc_default_timezone => "UTC"
          statement => "UPDATE case_data SET marked_by_logstash = true WHERE marked_by_logstash = false RETURNING id, created_date, last_modified, jurisdiction, case_type_id, state, last_state_modified_date, data::TEXT as json_data, data_classification::TEXT as json_data_classification, reference, security_classification, supplementary_data::TEXT as json_supplementary_data"
          clean_run => false
          schedule => "* * * * * *"
        }
      }
    02_filter.conf: |
      filter{
        json{
            source => "json_data"
            target => "data"
            remove_field => ["json_data"]
            }
            json{
                source => "json_supplementary_data"
                target => "supplementary_data"
                remove_field => ["json_supplementary_data"]
            }
            json{
                source => "json_data_classification"
                target => "data_classification"
                remove_field => ["json_data_classification"]
            }
            if [data][SearchCriteria] {
                clone {
                    clones => ["SearchCriteria"]
                }
            }
            if [type] == "SearchCriteria" {
                if [data][SearchCriteria] {
                    mutate {
                      rename => {"[data][SearchCriteria]" => "[data_new][SearchCriteria]" }
                    }
                }
                if [data][caseManagementLocation] {
                    mutate {
                      rename => {"[data][caseManagementLocation]" => "[data_new][caseManagementLocation]" }
                    }
                }
                if [data][CaseAccessCategory] {
                  mutate {
                      rename => {"[data][CaseAccessCategory]" => "[data_new][CaseAccessCategory]" }
                  }
                }
                if [data][caseNameHmctsInternal] {
                    mutate {
                      rename => {"[data][caseNameHmctsInternal]" => "[data_new][caseNameHmctsInternal]" }
                    }
                }
                if [data][caseManagementCategory] {
                    mutate {
                      rename => {"[data][caseManagementCategory]" => "[data_new][caseManagementCategory]" }
                    }
                }
                if [supplementary_data][HMCTSServiceId] {
                    mutate {
                      rename => {"[supplementary_data][HMCTSServiceId]" => "[supplementary_data_new][HMCTSServiceId]" }
                    }
                }
                if [data_classification][SearchCriteria] {
                    mutate {
                      rename => {"[data_classification][SearchCriteria]" => "[data_classification_new][SearchCriteria]" }
                    }
                }
                if [data_classification][CaseAccessCategory] {
                  mutate {
                        rename => {"[data_classification][CaseAccessCategory]" => "[data_classification_new][CaseAccessCategory]" }
                  }
                }
                if [data_classification][caseManagementLocation] {
                  mutate {
                      rename => {"[data_classification][caseManagementLocation]" => "[data_classification_new][caseManagementLocation]" }
                  }
                }
                if [data_classification][caseNameHmctsInternal] {
                    mutate {
                      rename => {"[data_classification][caseNameHmctsInternal]" => "[data_classification_new][caseNameHmctsInternal]" }
                    }
                }
                if [data_classification][caseManagementCategory] {
                    mutate {
                      rename => {"[data_classification][caseManagementCategory]" => "[data_classification_new][caseManagementCategory]" }
                    }
                }
                mutate { remove_field =>[ "data" ,"supplementary_data", "data_classification", "last_state_modified_date", "type","last_modified", "created_date" ] }
                mutate {
                        rename => { "[data_new]" => "data" }
                        rename => { "[supplementary_data_new]"  => "supplementary_data" }
                        rename => { "[data_classification_new]"  => "data_classification" }
                }
                mutate {
                  add_field => { "index_id" => "global_search" }
                }
                mutate {
                  lowercase => [ "index_id" ]
                }
            } else {
                mutate {
                    add_field => { "index_id" => "%{case_type_id}_cases" }
              }
            mutate {
              lowercase => [ "index_id" ]
            }
            }
      }
    03_output.conf: |
      output {
          elasticsearch {
              hosts => ["http://{{ .Release.Name }}-es-master:9200"]
              sniffing => false
              index => "%{[index_id]}"
              document_type => "_doc"
              document_id => "%{id}"
              timeout => 60
          }
      }
